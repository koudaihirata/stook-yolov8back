name: Build and Deploy to AWS Lambda

on:
  push:
    branches:
      - feature/*
      - hotfix/*
      - deploy/*
  pull_request:
    branches:
      - feature/*
      - hotfix/*

jobs:
  pytest:
    name: Execute pytest for lambda function
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv lock
          pipenv sync --dev

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies for node
        run: |
          yarn install --frozen-lockfile

      - name: Exec pytest
        run: |
          pipenv run test

      - name: Pytest coverage comment
        if: always()
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: ./coverage.txt
          junitxml-path: ./pytest.xml

  build:
    name: Confirm the diff and deploy to AWS Lambda
    if: ${{ !failure() && github.ref == 'refs/heads/deploy/*' }}
    needs: pytest
    runs-on: ubuntu-latest

    strategy:
      matrix:
        site: ["prod"]

    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - name: AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-3

      - name: Get app name from Terraform vars
        id: get-app-name
        run: |
          printf "APP_NAME=%s"  $(cat terraform/env/prod.tfvars | grep "app_name" | awk -F ' = ' '{print $2}') >> $GITHUB_ENV

      - name: Check and create ECR repository if not exists
        id: check-ecr-repo
        run: |
          ECR_REPO=""
          if ! ECR_REPO=$(aws ecr describe-repositories --repository-names ${{ steps.get-app-name.outputs.APP_NAME }} --query 'repositories[0].repositoryName' --output text 2>/dev/null); then
            echo "ECR repository does not exist. Creating it now..."
            aws ecr create-repository --repository-name ${{ steps.get-app-name.outputs.APP_NAME }} --image-scanning-configuration scanOnPush=true
            ECR_REPO=${{ steps.get-app-name.outputs.APP_NAME }}
          fi
          echo "ECR_REPOSITORY=$ECR_REPO" >> $GITHUB_OUTPUT

      - name: Get Lambda function name
        id: get-lambda-function
        run: |
          LAMBDA_FUNCTION=$(aws lambda list-functions --query "Functions[?starts_with(FunctionName, '${{ steps.get-app-name.outputs.APP_NAME }}')].FunctionName" --output text)
          if [ -z "$LAMBDA_FUNCTION" ]; then
            echo "Error: Lambda function starting with ${{ steps.get-app-name.outputs.APP_NAME }} not found"
            exit 1
          fi
          echo "LAMBDA_FUNCTION=$LAMBDA_FUNCTION" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.get-ecr-repo.outputs.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update Lambda function
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.check-ecr-repo.outputs.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws lambda update-function-code \
            --function-name ${{ steps.get-lambda-function.outputs.LAMBDA_FUNCTION }} \
            --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
